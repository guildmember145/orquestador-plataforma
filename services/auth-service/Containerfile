# Etapa de construcción
FROM docker.io/golang:1.24.3-alpine AS builder
WORKDIR /app
COPY go.mod go.sum ./
RUN go mod download
COPY . .
# Deshabilitar CGO para compilación estática, importante para Alpine
# y evitar dependencias de libc si es posible.
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o auth-service ./cmd/server/main.go

# Etapa final - Imagen ligera
FROM alpine:latest
RUN apk --no-cache add ca-certificates tzdata # Certificados CA para HTTPS y timezone data
WORKDIR /root/
# Copiar el binario compilado desde la etapa 'builder'
COPY --from=builder /app/auth-service .
# Copiar el .env (esto es para ejemplo, en producción usarías secrets de Podman o variables de entorno al ejecutar)
# COPY .env . 
# Exponer el puerto que la aplicación usa internamente
EXPOSE 5000
# Comando para correr la aplicación
CMD ["./auth-service"]